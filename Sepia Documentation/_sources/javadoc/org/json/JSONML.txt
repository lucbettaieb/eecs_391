.. java:import:: java.util Iterator

JSONML
======

.. java:package:: org.json
   :noindex:

.. java:type:: public class JSONML

   This provides static methods to convert an XML text into a JSONArray or JSONObject, and to covert a JSONArray or JSONObject into an XML text using the JsonML transform.

   :author: JSON.org

Methods
-------
toJSONArray
^^^^^^^^^^^

.. java:method:: public static JSONArray toJSONArray(String string) throws JSONException
   :outertype: JSONML

   Convert a well-formed (but not necessarily valid) XML string into a JSONArray using the JsonML transform. Each XML tag is represented as a JSONArray in which the first element is the tag name. If the tag has attributes, then the second element will be JSONObject containing the name/value pairs. If the tag contains children, then strings and JSONArrays will represent the child tags. Comments, prologs, DTDs, and \ ``<[ [ ]]>``\  are ignored.

   :param string: The source string.
   :throws JSONException:
   :return: A JSONArray containing the structured data from the XML string.

toJSONArray
^^^^^^^^^^^

.. java:method:: public static JSONArray toJSONArray(XMLTokener x) throws JSONException
   :outertype: JSONML

   Convert a well-formed (but not necessarily valid) XML string into a JSONArray using the JsonML transform. Each XML tag is represented as a JSONArray in which the first element is the tag name. If the tag has attributes, then the second element will be JSONObject containing the name/value pairs. If the tag contains children, then strings and JSONArrays will represent the child content and tags. Comments, prologs, DTDs, and \ ``<[ [ ]]>``\  are ignored.

   :param x: An XMLTokener.
   :throws JSONException:
   :return: A JSONArray containing the structured data from the XML string.

toJSONObject
^^^^^^^^^^^^

.. java:method:: public static JSONObject toJSONObject(XMLTokener x) throws JSONException
   :outertype: JSONML

   Convert a well-formed (but not necessarily valid) XML string into a JSONObject using the JsonML transform. Each XML tag is represented as a JSONObject with a "tagName" property. If the tag has attributes, then the attributes will be in the JSONObject as properties. If the tag contains children, the object will have a "childNodes" property which will be an array of strings and JsonML JSONObjects. Comments, prologs, DTDs, and \ ``<[ [ ]]>``\  are ignored.

   :param x: An XMLTokener of the XML source text.
   :throws JSONException:
   :return: A JSONObject containing the structured data from the XML string.

toJSONObject
^^^^^^^^^^^^

.. java:method:: public static JSONObject toJSONObject(String string) throws JSONException
   :outertype: JSONML

   Convert a well-formed (but not necessarily valid) XML string into a JSONObject using the JsonML transform. Each XML tag is represented as a JSONObject with a "tagName" property. If the tag has attributes, then the attributes will be in the JSONObject as properties. If the tag contains children, the object will have a "childNodes" property which will be an array of strings and JsonML JSONObjects. Comments, prologs, DTDs, and \ ``<[ [ ]]>``\  are ignored.

   :param string: The XML source text.
   :throws JSONException:
   :return: A JSONObject containing the structured data from the XML string.

toString
^^^^^^^^

.. java:method:: public static String toString(JSONArray ja) throws JSONException
   :outertype: JSONML

   Reverse the JSONML transformation, making an XML text from a JSONArray.

   :param ja: A JSONArray.
   :throws JSONException:
   :return: An XML string.

toString
^^^^^^^^

.. java:method:: public static String toString(JSONObject jo) throws JSONException
   :outertype: JSONML

   Reverse the JSONML transformation, making an XML text from a JSONObject. The JSONObject must contain a "tagName" property. If it has children, then it must have a "childNodes" property containing an array of objects. The other properties are attributes with string values.

   :param jo: A JSONObject.
   :throws JSONException:
   :return: An XML string.

