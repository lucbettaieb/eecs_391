.. java:import:: java.io BufferedReader

.. java:import:: java.io IOException

.. java:import:: java.io InputStream

.. java:import:: java.io InputStreamReader

.. java:import:: java.io Reader

.. java:import:: java.io StringReader

JSONTokener
===========

.. java:package:: org.json
   :noindex:

.. java:type:: public class JSONTokener

   A JSONTokener takes a source string and extracts characters and tokens from it. It is used by the JSONObject and JSONArray constructors to parse JSON source strings.

   :author: JSON.org

Constructors
------------
JSONTokener
^^^^^^^^^^^

.. java:constructor:: public JSONTokener(Reader reader)
   :outertype: JSONTokener

   Construct a JSONTokener from a Reader.

   :param reader: A reader.

JSONTokener
^^^^^^^^^^^

.. java:constructor:: public JSONTokener(InputStream inputStream) throws JSONException
   :outertype: JSONTokener

   Construct a JSONTokener from an InputStream.

JSONTokener
^^^^^^^^^^^

.. java:constructor:: public JSONTokener(String s)
   :outertype: JSONTokener

   Construct a JSONTokener from a string.

   :param s: A source string.

Methods
-------
back
^^^^

.. java:method:: public void back() throws JSONException
   :outertype: JSONTokener

   Back up one character. This provides a sort of lookahead capability, so that you can test for a digit or letter before attempting to parse the next number or identifier.

dehexchar
^^^^^^^^^

.. java:method:: public static int dehexchar(char c)
   :outertype: JSONTokener

   Get the hex value of a character (base16).

   :param c: A character between '0' and '9' or between 'A' and 'F' or between 'a' and 'f'.
   :return: An int between 0 and 15, or -1 if c was not a hex digit.

end
^^^

.. java:method:: public boolean end()
   :outertype: JSONTokener

more
^^^^

.. java:method:: public boolean more() throws JSONException
   :outertype: JSONTokener

   Determine if the source string still contains characters that next() can consume.

   :return: true if not yet at the end of the source.

next
^^^^

.. java:method:: public char next() throws JSONException
   :outertype: JSONTokener

   Get the next character in the source string.

   :return: The next character, or 0 if past the end of the source string.

next
^^^^

.. java:method:: public char next(char c) throws JSONException
   :outertype: JSONTokener

   Consume the next character, and check that it matches a specified character.

   :param c: The character to match.
   :throws JSONException: if the character does not match.
   :return: The character.

next
^^^^

.. java:method:: public String next(int n) throws JSONException
   :outertype: JSONTokener

   Get the next n characters.

   :param n: The number of characters to take.
   :throws JSONException: Substring bounds error if there are not n characters remaining in the source string.
   :return: A string of n characters.

nextClean
^^^^^^^^^

.. java:method:: public char nextClean() throws JSONException
   :outertype: JSONTokener

   Get the next char in the string, skipping whitespace.

   :throws JSONException:
   :return: A character, or 0 if there are no more characters.

nextString
^^^^^^^^^^

.. java:method:: public String nextString(char quote) throws JSONException
   :outertype: JSONTokener

   Return the characters up to the next close quote character. Backslash processing is done. The formal JSON format does not allow strings in single quotes, but an implementation is allowed to accept them.

   :param quote: The quoting character, either \ ``"``\  (double quote) or \ ``'``\  (single quote).
   :throws JSONException: Unterminated string.
   :return: A String.

nextTo
^^^^^^

.. java:method:: public String nextTo(char delimiter) throws JSONException
   :outertype: JSONTokener

   Get the text up but not including the specified character or the end of line, whichever comes first.

   :param delimiter: A delimiter character.
   :return: A string.

nextTo
^^^^^^

.. java:method:: public String nextTo(String delimiters) throws JSONException
   :outertype: JSONTokener

   Get the text up but not including one of the specified delimiter characters or the end of line, whichever comes first.

   :param delimiters: A set of delimiter characters.
   :return: A string, trimmed.

nextValue
^^^^^^^^^

.. java:method:: public Object nextValue() throws JSONException
   :outertype: JSONTokener

   Get the next value. The value can be a Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the JSONObject.NULL object.

   :throws JSONException: If syntax error.
   :return: An object.

skipTo
^^^^^^

.. java:method:: public char skipTo(char to) throws JSONException
   :outertype: JSONTokener

   Skip characters until the next character is the requested character. If the requested character is not found, no characters are skipped.

   :param to: A character to skip to.
   :return: The requested character, or zero if the requested character is not found.

syntaxError
^^^^^^^^^^^

.. java:method:: public JSONException syntaxError(String message)
   :outertype: JSONTokener

   Make a JSONException to signal a syntax error.

   :param message: The error message.
   :return: A JSONException object, suitable for throwing

toString
^^^^^^^^

.. java:method:: public String toString()
   :outertype: JSONTokener

   Make a printable string of this JSONTokener.

   :return: " at {index} [character {character} line {line}]"

