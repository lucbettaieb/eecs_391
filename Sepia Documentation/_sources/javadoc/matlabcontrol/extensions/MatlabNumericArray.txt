.. java:import:: java.lang.reflect Array

.. java:import:: java.util Arrays

.. java:import:: java.util Map

.. java:import:: java.util.concurrent ConcurrentHashMap

MatlabNumericArray
==================

.. java:package:: matlabcontrol.extensions
   :noindex:

.. java:type:: public final class MatlabNumericArray

   Acts as a MATLAB array of doubles. MATLAB arrays of any numeric type may be represented by a \ ``MatlabNumericArray``\ , but precision may be lost in the process. Dimensions of 2 and greater are supported. (No array in MATLAB has a dimension less than 2.) This representation is a copy of the MATLAB data, not a live view. Retrieving large arrays from MATLAB can result in a \ :java:ref:`OutOfMemoryError`\ ; if this occurs you may want to either retrieve only part of the array from MATLAB or increase your Java Virtual Machine's heap size.  \ **Note:**\  Sparse arrays are not supported. Attempts to retrieve a sparse may not throw an exception, but the result will not be valid.  Both the real and imaginary components of a MATLAB array are supported. If the array has no imaginary values then attempts to access these values will result in a \ :java:ref:`IllegalStateException`\  being thrown.  Arrays in MATLAB are stored in a linear manner. The number and lengths of the dimensions are stored separately from the real and imaginary value entries. Each dimension has a fixed length. (MATLAB's array implementation is known as a dope vector.)  Java has no multidimensional array type. To support multiple dimensions, Java allows for creating arrays of any data type, including arrays. (Java's array implementation is known as an Iliffe vector.) A two dimensional array of \ ``double``\ s, \ ``double[][]``\ , is just an array of \ ``double[]``\ . A result of this is that each \ ``double[]``\  can have a different length. When not all inner arrays for a given dimension have the same length, then the array is known as as a jagged array (also known as a ragged array).  When an array is retrieved from MATLAB the resulting Java array is never jagged. When a \ ``MatlabNumericArray``\  is constructed from Java arrays, the arrays provided may be jagged; see the \ :java:ref:`main constructor <MatlabNumericArray(DoubleArrayType,java.lang.Object,java.lang.Object)>`\  for details.  Each instance knows the number of dimensions it represents and can create the corresponding multidimensional Java array. In order to do this in a type safe manner the methods \ :java:ref:`getRealArray(...) <getRealArray(DoubleArrayType)>`\  and \ :java:ref:`getImaginaryArray(...) <getImaginaryArray(DoubleArrayType)>`\  exist. Convenience methods exist to easily retrieve the arrays as two, three, and four dimensional arrays. All of these methods will throw a \ :java:ref:`ArrayDimensionException`\  if the array is not actually of that dimension. It is also possible to retrieve values from the array without converting it to the corresponding multidimensional Java array. This can be done either by using the index into the underlying linear MATLAB array, or by using the multidimensional indices. Retrieving values in this manner does not require the computation and memory necessary to create the multidimensional Java array.  While this class mimics the dimension and lengths of a MATLAB array, it uses Java's 0-index convention instead of MATLAB's 1-index convention. For instance in MATLAB if an array were indexed into as \ ``array(3,4,7,2)``\ , then in Java to retrieve the same entry the indexing would be performed as \ ``array[2][3][6][1]``\ .  Once constructed, this class is unconditionally thread-safe. If the data provided to a constructor is modified while construction is occurring, problems may occur.

   :author: \ `Joshua Kaplan <mailto:nonother@gmail.com>`_\

   **See also:** :java:ref:`TypeConverter.setNumericArray(java.lang.String,matlabcontrol.extensions.MatlabNumericArray)`, :java:ref:`TypeConverter.getNumericArray(java.lang.String)`

Constructors
------------
MatlabNumericArray
^^^^^^^^^^^^^^^^^^

.. java:constructor::  MatlabNumericArray(double[] real, double[] imaginary, int[] lengths)
   :outertype: MatlabNumericArray

   Constructs an array from data retrieved from MATLAB.

   :param real:
   :param imaginary:
   :param lengths:

MatlabNumericArray
^^^^^^^^^^^^^^^^^^

.. java:constructor:: public <T> MatlabNumericArray(DoubleArrayType<T> type, T real, T imaginary)
   :outertype: MatlabNumericArray

   Constructs a numeric array from Java arrays that can be transferred to MATLAB. The \ ``imaginary``\  array may be \ ``null``\ , if so then this array will be real. References to the arrays passed in are not kept, and modifying the array data after this class has been constructed will have no effect. If the data is modified concurrently with this class's construction, problems may arise.  The arrays may be jagged; however, MATLAB does not support jagged arrays and therefore the arrays will be treated as if they had uniform length for each dimension. For each dimension the maximum length is determined. If both the \ ``real``\  and \ ``imaginary``\  arrays are provided then the maximum length per dimension is determined across both arrays. For parts of the array that have a length less than the maximum length, \ ``0``\  will be used.

   :param <T>:
   :param type: may not be \ ``null``\
   :param real: may not be \ ``null``\
   :param imaginary: may be \ ``null``\ , if \ ``null``\  then this array will be real
   :throws NullPointerException:

MatlabNumericArray
^^^^^^^^^^^^^^^^^^

.. java:constructor:: public MatlabNumericArray(double[][] real, double[][] imaginary)
   :outertype: MatlabNumericArray

   Convenience constructor, equivalent to \ ``new MatlabNumericArray(DoubleArrayType.DIM_2, real, imaginary)``\ .

   :param real:
   :param imaginary:
   :throws NullPointerException:

MatlabNumericArray
^^^^^^^^^^^^^^^^^^

.. java:constructor:: public MatlabNumericArray(double[][][] real, double[][][] imaginary)
   :outertype: MatlabNumericArray

   Convenience constructor, equivalent to \ ``new MatlabNumericArray(DoubleArrayType.DIM_3, real, imaginary)``\ .

   :param real:
   :param imaginary:
   :throws NullPointerException:

MatlabNumericArray
^^^^^^^^^^^^^^^^^^

.. java:constructor:: public MatlabNumericArray(double[][][][] real, double[][][][] imaginary)
   :outertype: MatlabNumericArray

   Convenience constructor, equivalent to \ ``new MatlabNumericArray(DoubleArrayType.DIM_4, real, imaginary)``\ .

   :param real:
   :param imaginary:
   :throws NullPointerException:

Methods
-------
getDimensions
^^^^^^^^^^^^^

.. java:method:: public int getDimensions()
   :outertype: MatlabNumericArray

   The number of dimensions this array has.

   :return: number of dimensions

getImaginaryArray
^^^^^^^^^^^^^^^^^

.. java:method:: public <T> T getImaginaryArray(DoubleArrayType<T> type)
   :outertype: MatlabNumericArray

   Returns a \ ``double``\  array of type \ ``T``\  that holds the imaginary values from the MATLAB array.

   :param <T>:
   :param type:
   :throws ArrayDimensionException: if the array is not of the dimension specified by \ ``type``\
   :throws IllegalStateException: if the array is real

getImaginaryArray2D
^^^^^^^^^^^^^^^^^^^

.. java:method:: public double[][] getImaginaryArray2D()
   :outertype: MatlabNumericArray

   Equivalent to \ ``getImaginaryArray(DoubleArrayType.DIM_2)``\ .

   :throws ArrayDimensionException: if the array is not a two dimensional array
   :throws IllegalStateException: if the array is real

getImaginaryArray3D
^^^^^^^^^^^^^^^^^^^

.. java:method:: public double[][][] getImaginaryArray3D()
   :outertype: MatlabNumericArray

   Equivalent to \ ``getImaginaryArray(DoubleArrayType.DIM_3)``\ .

   :throws ArrayDimensionException: if the array is not a three dimensional array
   :throws IllegalStateException: if the array is real

getImaginaryArray4D
^^^^^^^^^^^^^^^^^^^

.. java:method:: public double[][][][] getImaginaryArray4D()
   :outertype: MatlabNumericArray

   Equivalent to \ ``getImaginaryArray(DoubleArrayType.DIM_4)``\ .

   :throws ArrayDimensionException: if the array is not a four dimensional array
   :throws IllegalStateException: if the array is real

getImaginaryLinearArray
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method::  double[] getImaginaryLinearArray()
   :outertype: MatlabNumericArray

   Returns the underlying linear array of imaginary values. Returns the actual array, not a copy.

getImaginaryValue
^^^^^^^^^^^^^^^^^

.. java:method:: public double getImaginaryValue(int linearIndex)
   :outertype: MatlabNumericArray

   Gets the imaginary value at \ ``linearIndex``\  treating this array as the underlying one dimensional array. This is equivalent to indexing into a MATLAB array with just one subscript.

   :param linearIndex:
   :throws ArrayIndexOutOfBoundsException:
   :throws IllegalStateException: if the array is real
   :return: imaginary value at \ ``linearIndex``\

getImaginaryValue
^^^^^^^^^^^^^^^^^

.. java:method:: public double getImaginaryValue(int... indices)
   :outertype: MatlabNumericArray

   Gets the imaginary value at the specified \ ``indices``\ . The amount of indices provided must be the number of dimensions in the array.

   :param indices:
   :throws ArrayDimensionException: if number of indices is not the number of dimensions
   :throws IllegalStateException: if the array is real
   :throws IndexOutOfBoundsException: if the indices are out of bound
   :return: imaginary value at \ ``indices``\

getLength
^^^^^^^^^

.. java:method:: public int getLength()
   :outertype: MatlabNumericArray

   The length of the underlying linear array.

   :return: length

getLengths
^^^^^^^^^^

.. java:method:: public int[] getLengths()
   :outertype: MatlabNumericArray

   Returns the lengths of each dimension with respect to their index. In MATLAB the first dimension (0 index in the returned integer array) is the row length. The second dimension is the column length. The third dimension and beyond are pages. The length of the returned array will be the number of dimensions returned by \ :java:ref:`getDimensions()`\ .

   :return: lengths

getRealArray
^^^^^^^^^^^^

.. java:method:: public <T> T getRealArray(DoubleArrayType<T> type)
   :outertype: MatlabNumericArray

   Returns a \ ``double``\  array of type \ ``T``\  that holds the real values from the MATLAB array.

   :param <T>:
   :param type:
   :throws ArrayDimensionException: if the array is not of the dimension specified by \ ``type``\

getRealArray2D
^^^^^^^^^^^^^^

.. java:method:: public double[][] getRealArray2D()
   :outertype: MatlabNumericArray

   Equivalent to \ ``getRealArray(DoubleArrayType.DIM_2)``\ .

   :throws ArrayDimensionException: if the array is not a two dimensional array

getRealArray3D
^^^^^^^^^^^^^^

.. java:method:: public double[][][] getRealArray3D()
   :outertype: MatlabNumericArray

   Equivalent to \ ``getRealArray(DoubleArrayType.DIM_3)``\ .

   :throws ArrayDimensionException: if the array is not a three dimensional array

getRealArray4D
^^^^^^^^^^^^^^

.. java:method:: public double[][][][] getRealArray4D()
   :outertype: MatlabNumericArray

   Equivalent to \ ``getRealArray(DoubleArrayType.DIM_4)``\ .

   :throws ArrayDimensionException: if the array is not a four dimensional array

getRealLinearArray
^^^^^^^^^^^^^^^^^^

.. java:method::  double[] getRealLinearArray()
   :outertype: MatlabNumericArray

   Returns the underlying linear array of real values. Returns the actual array, not a copy.

getRealValue
^^^^^^^^^^^^

.. java:method:: public double getRealValue(int linearIndex)
   :outertype: MatlabNumericArray

   Gets the real value at \ ``linearIndex``\  treating this array as the underlying one dimensional array. This is equivalent to indexing into a MATLAB array with just one subscript.

   :param linearIndex:
   :throws ArrayIndexOutOfBoundsException:
   :return: real value at \ ``linearIndex``\

getRealValue
^^^^^^^^^^^^

.. java:method:: public double getRealValue(int... indices)
   :outertype: MatlabNumericArray

   Gets the real value at the specified \ ``indices``\ . The amount of indices provided must be the number of dimensions in the array.

   :param indices:
   :throws ArrayDimensionException: if number of indices is not the number of dimensions
   :throws IndexOutOfBoundsException: if the indices are out of bound
   :return: real value at \ ``indices``\

isReal
^^^^^^

.. java:method:: public boolean isReal()
   :outertype: MatlabNumericArray

   Returns \ ``true``\  if the array has no imaginary values, \ ``false``\  otherwise. Equivalent to the MATLAB \ ``isreal``\  function.

toString
^^^^^^^^

.. java:method:: @Override public String toString()
   :outertype: MatlabNumericArray

   Returns a brief description of this array. The exact details of this representation are unspecified and are subject to change.

