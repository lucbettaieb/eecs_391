.. java:import:: java.util HashSet

.. java:import:: java.util List

.. java:import:: java.util Map

.. java:import:: java.util Set

.. java:import:: edu.cwru.sepia.action Action

DeepEquatableUtil
=================

.. java:package:: edu.cwru.sepia.util
   :noindex:

.. java:type:: public class DeepEquatableUtil

   Some utility methods to use DeepEquals on Collections, as well as null-checking on both.

   :author: The Condor

Methods
-------
deepEquals
^^^^^^^^^^

.. java:method:: public static boolean deepEquals(DeepEquatable obj1, DeepEquatable obj2)
   :outertype: DeepEquatableUtil

   A method to compare the deep equality of two DeepEquatable objects.

   :param obj1:
   :param obj2:
   :return: True if both arguments are null of if both are non-null and deepEquals to eachother. False otherwise.

deepEqualsIntList
^^^^^^^^^^^^^^^^^

.. java:method:: public static <T> boolean deepEqualsIntList(List<Integer> obj1, List<Integer> obj2)
   :outertype: DeepEquatableUtil

   A method to compare the deep equality of two Lists of Integers.

   :param obj1:
   :param obj2:
   :return: True if both arguments are null or if both are non-null, of the same size, and objects with the same indices are equals to eachother. False otherwise.

deepEqualsIntSet
^^^^^^^^^^^^^^^^

.. java:method:: public static boolean deepEqualsIntSet(Set<Integer> obj1, Set<Integer> obj2)
   :outertype: DeepEquatableUtil

   A method to compare the deep equality of two Sets of Integer objects.

   :param obj1:
   :param obj2:
   :return: True if both arguments are null or if both are non-null, of the same size, and each . False otherwise.

deepEqualsList
^^^^^^^^^^^^^^

.. java:method:: public static boolean deepEqualsList(List<? extends DeepEquatable> obj1, List<? extends DeepEquatable> obj2)
   :outertype: DeepEquatableUtil

   A method to compare the deep equality of two Lists.  Suffixed by List due to type erasure, which makes generics not overload intuitively.

   :param obj1:
   :param obj2:
   :return: True if both arguments are null or if both are non-null, of the same size, and objects with the same indices are deepEquals to eachother. False otherwise.

deepEqualsListList
^^^^^^^^^^^^^^^^^^

.. java:method:: public static boolean deepEqualsListList(List<? extends List<? extends DeepEquatable>> obj1, List<? extends List<? extends DeepEquatable>> obj2)
   :outertype: DeepEquatableUtil

   A method to compare the deep equality of two Lists of Lists.  Suffixed by ListList due to type erasure, which makes generics not overload intuitively.

   :param obj1:
   :param obj2:
   :return: True if both arguments are null or if both are non-null, of the same size, and objects with the same indices are deepEquals to eachother. False otherwise.

deepEqualsListMap
^^^^^^^^^^^^^^^^^

.. java:method:: public static boolean deepEqualsListMap(List<? extends Map<Integer, ? extends DeepEquatable>> obj1, List<? extends Map<Integer, ? extends DeepEquatable>> obj2)
   :outertype: DeepEquatableUtil

   A method to compare the deep equality of two Lists of Lists.  Suffixed by ListList due to type erasure, which makes generics not overload intuitively.

   :param obj1:
   :param obj2:
   :return: True if both arguments are null or if both are non-null, of the same size, and objects with the same indices are deepEquals to eachother. False otherwise.

deepEqualsMap
^^^^^^^^^^^^^

.. java:method:: public static <T> boolean deepEqualsMap(Map<T, ? extends DeepEquatable> obj1, Map<T, ? extends DeepEquatable> obj2)
   :outertype: DeepEquatableUtil

   A method to compare the deep equality of two Maps.  Suffixed by Map for consistancy with others and extensibility.

   :param obj1:
   :param obj2:
   :return: True if both arguments are null or if both are non-null, of the same size, and objects with the same indices are deepEquals to eachother. False otherwise.

