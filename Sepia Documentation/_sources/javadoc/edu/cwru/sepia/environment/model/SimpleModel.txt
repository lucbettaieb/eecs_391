.. java:import:: java.util ArrayList

.. java:import:: java.util HashMap

.. java:import:: java.util LinkedList

.. java:import:: java.util List

.. java:import:: java.util Map

.. java:import:: java.util Map.Entry

.. java:import:: java.util.logging Level

.. java:import:: java.util.logging Logger

.. java:import:: java.util Random

.. java:import:: edu.cwru.sepia.action Action

.. java:import:: edu.cwru.sepia.action ActionFeedback

.. java:import:: edu.cwru.sepia.action ActionQueue

.. java:import:: edu.cwru.sepia.action ActionResult

.. java:import:: edu.cwru.sepia.action ActionType

.. java:import:: edu.cwru.sepia.action DirectedAction

.. java:import:: edu.cwru.sepia.action LocatedAction

.. java:import:: edu.cwru.sepia.action LocatedProductionAction

.. java:import:: edu.cwru.sepia.action ProductionAction

.. java:import:: edu.cwru.sepia.action TargetedAction

.. java:import:: edu.cwru.sepia.environment TurnTracker

.. java:import:: edu.cwru.sepia.environment.model.history History

.. java:import:: edu.cwru.sepia.environment.model.state ResourceNode

.. java:import:: edu.cwru.sepia.environment.model.state ResourceType

.. java:import:: edu.cwru.sepia.environment.model.state State

.. java:import:: edu.cwru.sepia.environment.model.state StateCreator

.. java:import:: edu.cwru.sepia.environment.model.state Template

.. java:import:: edu.cwru.sepia.environment.model.state Unit

.. java:import:: edu.cwru.sepia.environment.model.state UnitTemplate

.. java:import:: edu.cwru.sepia.environment.model.state UpgradeTemplate

.. java:import:: edu.cwru.sepia.experiment Configuration

.. java:import:: edu.cwru.sepia.experiment ConfigurationValues

.. java:import:: edu.cwru.sepia.util Direction

.. java:import:: edu.cwru.sepia.util DistanceMetrics

.. java:import:: edu.cwru.sepia.util GameMap

SimpleModel
===========

.. java:package:: edu.cwru.sepia.environment.model
   :noindex:

.. java:type:: public class SimpleModel implements Model

   A "Simple" Model. This model is sequential, processing most actions one at a time, and resolves conflicts in this manner. This model assumes players don't take turns and primitive actions take exactly one step to complete, and will disregard all evidence to the contrary.

Constructors
------------
SimpleModel
^^^^^^^^^^^

.. java:constructor:: public SimpleModel(State init, int seed, StateCreator restartTactic, Configuration configuration)
   :outertype: SimpleModel

Methods
-------
addActions
^^^^^^^^^^

.. java:method:: @Override public void addActions(Map<Integer, Action> actions, int sendingPlayerNumber)
   :outertype: SimpleModel

createNewWorld
^^^^^^^^^^^^^^

.. java:method:: @Override public void createNewWorld()
   :outertype: SimpleModel

executeStep
^^^^^^^^^^^

.. java:method:: @Override public void executeStep()
   :outertype: SimpleModel

getConfiguration
^^^^^^^^^^^^^^^^

.. java:method:: @Override public Configuration getConfiguration()
   :outertype: SimpleModel

getHistory
^^^^^^^^^^

.. java:method:: @Override public History getHistory()
   :outertype: SimpleModel

getState
^^^^^^^^

.. java:method:: @Override public State getState()
   :outertype: SimpleModel

getVerbose
^^^^^^^^^^

.. java:method:: @Override public boolean getVerbose()
   :outertype: SimpleModel

isTerminated
^^^^^^^^^^^^

.. java:method:: @Override public boolean isTerminated()
   :outertype: SimpleModel

save
^^^^

.. java:method:: public void save(String filename)
   :outertype: SimpleModel

setConfiguration
^^^^^^^^^^^^^^^^

.. java:method:: @Override public void setConfiguration(Configuration configuration)
   :outertype: SimpleModel

setTurnTracker
^^^^^^^^^^^^^^

.. java:method:: @Override public void setTurnTracker(TurnTracker turnTracker)
   :outertype: SimpleModel

setVerbose
^^^^^^^^^^

.. java:method:: @Override public void setVerbose(boolean verbose)
   :outertype: SimpleModel

