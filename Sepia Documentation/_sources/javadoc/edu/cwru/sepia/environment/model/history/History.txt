.. java:import:: java.util Collection

.. java:import:: java.util HashMap

.. java:import:: java.util List

.. java:import:: java.util Map

.. java:import:: edu.cwru.sepia.action Action

.. java:import:: edu.cwru.sepia.action ActionResult

.. java:import:: edu.cwru.sepia.agent Agent

.. java:import:: edu.cwru.sepia.environment.model.state ResourceNode

.. java:import:: edu.cwru.sepia.environment.model.state State

.. java:import:: edu.cwru.sepia.environment.model.state Unit

.. java:import:: edu.cwru.sepia.environment.model.state UpgradeTemplate

.. java:import:: edu.cwru.sepia.util DeepEquatable

.. java:import:: edu.cwru.sepia.util DeepEquatableUtil

History
=======

.. java:package:: edu.cwru.sepia.environment.model.history
   :noindex:

.. java:type:: public class History implements DeepEquatable

Constructors
------------
History
^^^^^^^

.. java:constructor:: public History()
   :outertype: History

Methods
-------
addPlayer
^^^^^^^^^

.. java:method:: public void addPlayer(int i)
   :outertype: History

deepEquals
^^^^^^^^^^

.. java:method:: public boolean deepEquals(Object other)
   :outertype: History

getObserverHistory
^^^^^^^^^^^^^^^^^^

.. java:method:: public PlayerHistory getObserverHistory()
   :outertype: History

   The observer history. This is expected to be at least as complete as the union of all other PlayerHistory objects.

   :return: A PlayerHistory representing the view of an observer.

getPlayerHistories
^^^^^^^^^^^^^^^^^^

.. java:method:: public Collection<PlayerHistory> getPlayerHistories()
   :outertype: History

   Get all of the player histories

   :return: A collection of all non-observer PlayerHistory objects.

getPlayerHistory
^^^^^^^^^^^^^^^^

.. java:method:: public PlayerHistory getPlayerHistory(int playerNumber)
   :outertype: History

   Get the PlayerHistory for a specific player

   :param playerNumber:
   :return: The PlayerHistory for the player if it exists, null otherwise.

getView
^^^^^^^

.. java:method:: public HistoryView getView(int player)
   :outertype: History

hasFogOfWar
^^^^^^^^^^^

.. java:method:: public boolean hasFogOfWar()
   :outertype: History

recordBirth
^^^^^^^^^^^

.. java:method:: public void recordBirth(Unit newunit, Unit builder, State state)
   :outertype: History

recordCommandFeedback
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void recordCommandFeedback(int player, int stepnumber, ActionResult commandFeedback)
   :outertype: History

recordCommandRecieved
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void recordCommandRecieved(int player, int stepnumber, int unitID, Action actionRecieved)
   :outertype: History

recordDamage
^^^^^^^^^^^^

.. java:method:: public void recordDamage(Unit u, Unit target, int damage, State state)
   :outertype: History

recordDeath
^^^^^^^^^^^

.. java:method:: public void recordDeath(Unit u, State state)
   :outertype: History

recordPrimitiveFeedback
^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void recordPrimitiveFeedback(int player, int stepnumber, ActionResult primitiveFeedback)
   :outertype: History

recordResourceDropoff
^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void recordResourceDropoff(Unit u, Unit townHall, State state)
   :outertype: History

recordResourceNodeExhaustion
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void recordResourceNodeExhaustion(ResourceNode r, State state)
   :outertype: History

recordResourcePickup
^^^^^^^^^^^^^^^^^^^^

.. java:method:: public void recordResourcePickup(Unit u, ResourceNode resource, int amountPickedUp, State state)
   :outertype: History

recordUpgrade
^^^^^^^^^^^^^

.. java:method:: public void recordUpgrade(UpgradeTemplate upgradetemplate, Unit creator, State state)
   :outertype: History

setFogOfWar
^^^^^^^^^^^

.. java:method:: public void setFogOfWar(boolean fogOfWar)
   :outertype: History

setObserverHistory
^^^^^^^^^^^^^^^^^^

.. java:method:: public void setObserverHistory(PlayerHistory oh)
   :outertype: History

   Set the playerHistory for the observer directly. Used internally for loading.

   :param oh: A player history for the observer.

setPlayerHistory
^^^^^^^^^^^^^^^^

.. java:method:: public void setPlayerHistory(PlayerHistory ph)
   :outertype: History

   Set/Add a playerHistory directly. Used internally for loading.

   :param ph:

